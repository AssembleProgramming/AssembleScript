$=====================================================================================
                            SELF TEST IMPLEMENTATION
======================================================================================$
# This file contains the implementations and test cases for the current functionality of 
# AssembleScript. Write to this file is strictly prohibited
#                         ❌ DO NOT EDIT THIS FILE ❌

$=====================================================================================
                            Helper function for assertions
======================================================================================$
def assertEqual(actual, expected) {
  ifWorthy(actual == expected) {
    vision("✅Test passed!");
  }
  otherwise {
    vision("❌Test failed!");
    vision("⚠️ Expected: ", expected);
    vision("⚠️ Output: ", actual);
    vision(BROKEN);
  }
}

$=====================================================================================
                        Factorial calculation using recursion
======================================================================================$
def factorial_recursive(n) {
  ifWorthy(n == 0 || n == 1) {
    return 1;
  }
  return n * factorial_recursive(n - 1);
}

# Test case for factorial_recursive
def test_factorial_recursive() {
  vision("Testing factorial_recursive...");
  assertEqual(factorial_recursive(0), 1);
  assertEqual(factorial_recursive(1), 1);
  assertEqual(factorial_recursive(5), 120);
  assertEqual(factorial_recursive(10), 3628800);
  vision(" ");
}

$=====================================================================================
                            Factorial calculation using Loop
======================================================================================$
def factorial_loop(n) {
  ifWorthy(n == 0 || n == 1){
    return 1;
  }
  newAvenger result = 1;
  wakandaFor i in 1 to n {
    result = result * i;
  }
  return result;
}

# Test case for factorial_loop
def test_factorial_loop() {
  vision("Testing factorial_loop...");
  assertEqual(factorial_loop(0), 1);
  assertEqual(factorial_loop(1), 1);
  assertEqual(factorial_loop(5), 120);
  assertEqual(factorial_loop(10), 3628800);
  vision(" ");
}

$=====================================================================================
                Check if a number is prime using the Sieve of Eratosthenes
======================================================================================$
def is_prime_sieve(n) {
  ifWorthy(n <= 1) {
    return HYDRA;
  }
  team sieve(100) = {SHIELD};
  sieve[0] = HYDRA;
  sieve[1] = HYDRA;

  wakandaFor idx in 2 to 99 step 1{
    sieve[idx] = SHIELD;
  }
  newAvenger i = 2;
  fightUntil(i * i <= 100){
    ifWorthy(sieve[i]){
      newAvenger j = i * i;
      fightUntil(j <= 100){
        sieve[j] = HYDRA;
        j = j + i;
      }
    }
    i = i + 1;
  }

  return sieve[n];
}

# Test case for is_prime_sieve
def test_is_prime_sieve() {
  vision("Testing is_prime_sieve...");
  assertEqual(is_prime_sieve(2), SHIELD);
  assertEqual(is_prime_sieve(3), SHIELD);
  assertEqual(is_prime_sieve(4), HYDRA);
  assertEqual(is_prime_sieve(17), SHIELD);
  assertEqual(is_prime_sieve(25), HYDRA);
  vision(" ");
}


$=====================================================================================
                            Nested for loops
======================================================================================$
def nested_for_test() {
  vision("Testing nested_for_test...");
  newAvenger sum = 0;
  wakandaFor i in 1 to 2 {
    wakandaFor j in 1 to 2 {
      sum = sum + (i * j);
    }
  }
  assertEqual(sum, 9); 
  vision(" ");
}

$=====================================================================================
                            Run all the test cases
======================================================================================$
def run_tests() {
  test_factorial_recursive();
  test_factorial_loop();
  test_is_prime_sieve();
  nested_for_test();
}

run_tests();





















$ ==========================================================================
                            Variable Declaration 
========================================================================== $
vision("Testing Variable Declaration...");
newAvenger a = 10;
newEternal b = 11;
assertEqual(a, 10);
assertEqual(b, 11);
vision(" ");
$ ==========================================================================
                            fightUntil Loop
========================================================================== $
vision("Testing Break In loop...");
newAvenger i = 0;
fightUntil(i < 10){
    ifWorthy(i == 8){
        endGame;
    }
    i = i + 1;
}
assertEqual(i,9);
vision(" ");
$ ==========================================================================
                            Nested Teams
========================================================================== $
vision("Testing Nested Teams...");
newAvenger str = "Sahil";
team apk(1) = {str};
team arr(1) = {apk};
wakandaFor i in 0 to 0{
    wakandaFor j in 0 to 0{
        assertEqual(arr[i][j], "Sahil");
        return;
    }
}
vision(" ");
$ ==========================================================================
                            String
========================================================================== $
vision("Testing String Arithmetic...");
newEternal string = "12";
newEternal s = 3;

newAvenger resStrAdd = string + s;
newAvenger resStrMul = string*s;
newAvenger resStrMul_ = s * string;

assertEqual(resStrAdd, "123");
assertEqual(resStrMul, "121212");
assertEqual(resStrMul_, "121212");

newAvenger numstr = parseInt(string);
newAvenger nums = parseInt(s);

assertEqual(numstr + nums, 15);
assertEqual(numstr * nums, 36);

assertEqual(string, "12");
vision(" ");
$ ==========================================================================
                            Nums
========================================================================== $
vision("Testing Number Arithmetic...");
newAvenger n = 2;
newAvenger m = 10;

assertEqual(n ^ m, 1024);
assertEqual(pow(n, m), 1024);
vision(" ");
$ ==========================================================================
                            ifWorthy-CHAIN
========================================================================== $
vision("Testing ifWorthy-CHAIN...");
newAvenger name = "Shashank";
ifWorthy(name[0] == "S"){
    ifWorthy(name[1] == "h"){
        ifWorthy(name[2] == "a"){
            ifWorthy(name[3] == "s"){
                ifWorthy(name[4] == "h"){
                    ifWorthy(name[5] == "a"){
                        ifWorthy(name[6] == "n"){
                            ifWorthy(name[7] == "k"){
                                assertEqual("HI", "HI");
                                return;
                            } 
                        } 
                    } 
                } 
                vision("❌ You should never reach here!!!");
            } 
        } 
    }   
}
vision(" ");

$ ==========================================================================
                            Teams
========================================================================== $
vision("Testing teams...");
team avengers(4) = {"Captain America", "Iron Man", "Thor", "Hulk"};

newAvenger firstAvenger = avengers[0];
newAvenger secondAvenger = avengers[1];

assertEqual(firstAvenger, "Captain America");
assertEqual(secondAvenger, "Iron Man");


team male(10) = {"Captain America", "Iron Man" ,"Dr. Strange", "Hulk", "Hawkeye", "Spiderman", "Thor", "T`Challa", "Ant Man", "Moon Knight"};
team female(7) = {"Black Widow","Captain Marvel","Wanda Maximoff","She Hulk","Ms Marvel","Gamora","Nebula"};
team avenger(2) = {male, female};

assertEqual(avenger[0][4], "Hawkeye");
assertEqual(avenger[1][6], "Nebula");

vision(" ");
$ ==========================================================================
                            User Defined Functions
========================================================================== $
vision("Testing Usee Defined Functions...");
def f(){
    return ("Called f");
}
def f_(){
    return ("Called f_");
}
team functions(2) = {f(), f_};
assertEqual(functions[1](),"Called f_");

def testFunction(){
    ifWorthy(HYDRA){
        ifWorthy(HYDRA){
            return 10;
        }
        otherwise{
            ifWorthy(HYDRA){
                return 20;
            }
            otherwise{
                ifWorthy(HYDRA){
                    return 30;
                }
                otherwise{
                    return 11;
                }
            }
        }
    }
    otherwise ifWorthy(SHIELD){
        ifWorthy(HYDRA){
            return 100;
        }
        otherwise{
            ifWorthy(HYDRA){
                return 200;
            }
            otherwise{
                ifWorthy(HYDRA){
                    return 300;
                }
                otherwise{
                    return 1000;
                    vision("❌ This should never get called");
                }

            }
            vision("❌ This should never get called");
        }
    }
    otherwise{
        return 21;
    }
}
def main(){
    assertEqual(testFunction(), 1000);
}

main();
vision(" ");
$ ==========================================================================
                            Return in switch
========================================================================== $
vision("Testing User Defined Functions in Switch...");
def switchTest(c){
    multiverse(c){
        madness 0:
            return "Case 0";
        madness 1:
            return "Case 1";
        madness 2:
            return "Case 2";
        madness 3:
            return "Case 3";
        default:
            return "Default";
    }
}
vision(typeOf(switchTest(0)));
assertEqual(switchTest(0), "Case 0");
def stringSwitchTest(c){
    multiverse(c){
        madness "one":
            return "String Case 1";
        madness "two":
            return "String Case 2";
        madness "three":
            return "String Case 3";
        madness "four":
            return "String Case 4";
        default:
            return "String Case Default";
    }
}

assertEqual(stringSwitchTest("one"), "String Case 1");
vision(" ");

$ ==========================================================================
                            Return in while loop
========================================================================== $
vision("Testing Return in while loop...");
team testArray(6) = {11,13,17,19,23,27};
team testArray_(6) = {11,13,17,20,23,27};
def isEvenPresent(arr){
    newAvenger idx = 0;
    fightUntil(idx < 6){
        ifWorthy(arr[idx] % 2 == 0){
            return SHIELD;
        }
        idx = idx + 1;
    }
    return HYDRA;
}

assertEqual(isEvenPresent(testArray), HYDRA);
assertEqual(isEvenPresent(testArray_), SHIELD);